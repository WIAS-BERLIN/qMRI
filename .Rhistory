install.packages("adimpro")
install.packages("dti")
library(qMRI)
source('~/.active-rstudio-document', echo=TRUE)
mpmsp1
modelMPMQL2 <- estimateESTATICS(mpmsp1,
method = "QL",
sigma = sigma,
L = 1,
verbose = FALSE)
?estimateESTATICS
mpmsp1$=
names(mpmsp1)
modelMPMQLsp1
names(modelMPMQLsp1)
modelMPMQLsp1$smoothedData
# evaluate this here to be able to reduce the mask afterwards
# setCores(2)
modelMPMQLsp1 <- smoothESTATICS(modelMPM,
mpmData = extract(mpm, "ddata"),
kstar = 16,
alpha = 0.004,
patchsize = 1,
verbose = FALSE)
?smoothESTATICS
modelMPM
extract(mpm, "ddata")
?mpmdata
?estimateESTATICS
mpm
names(mpm)
library(qMRI)
?ActivityIndex::ReadGT3XPlus("/Users/johnmuschelli/Dropbox/Packages/ActivityIndex/inst/extdata/sample_GT3X+.csv.gz")
library(ActivityIndex)
filename = system.file("extdata","sample_GT3X+.csv.gz",
package="ActivityIndex")
res = ActivityIndex::ReadGT3XPlus(filename)
data = res$Raw
library(fst)
library(ActivityIndex)
library(fst)
filename = system.file("extdata","sample_GT3X+.csv.gz",
package="ActivityIndex")
res = ActivityIndex::ReadGT3XPlus(filename)
data = res$Raw
class(data)
library(ActivityIndex)
library(fst)
filename = system.file("extdata","sample_GT3X+.csv.gz",
package="ActivityIndex")
res = ActivityIndex::ReadGT3XPlus(filename)
data = res$Raw
df = as.data.frame(data)
fst_file = tempfile(fileext = ".fst")
fst::write_fst(df, fst_file)
fst_df = fst::fst(fst_file)
dt_fst_file = tempfile(fileext = ".fst")
fst::write_fst(data, dt_fst_file)
fst_dt = fst::fst(dt_fst_file)
fst_df
library(ActivityIndex)
library(fst)
library(lubridate)
filename = system.file("extdata","sample_GT3X+.csv.gz",
package="ActivityIndex")
res = ActivityIndex::ReadGT3XPlus(filename)
data = res$Raw
data$DT = paste(data$Date, data$Time)
data$DT = ymd_hms(data$DT)
df = as.data.frame(data)
fst_file = tempfile(fileext = ".fst")
fst::write_fst(df, fst_file)
fst_df = fst::fst(fst_file)
sub_df = fst_df[ fst_df$Time >= as]
fst_df
sub_df = fst_df[ fst_df$Time >= ymd_hms("2012-06-27 11:00:00") &
fst_df$Time <= ymd_hms("2012-06-27 12:00:00")]
sub_df = fst_df[ fst_df$Time >= ymd_hms("2012-06-27 11:00:00") &
fst_df$Time <= ymd_hms("2012-06-27 12:00:00"), ]
sub_df = fst_df[ fst_df$DT >= ymd_hms("2012-06-27 11:00:00") &
fst_df$DT <= ymd_hms("2012-06-27 12:00:00"), ]
head(sub_df)
class(sub_df)
class(fst_df)
library(ActivityIndex)
library(fst)
library(lubridate)
filename = system.file("extdata","sample_GT3X+.csv.gz",
package="ActivityIndex")
res = ActivityIndex::ReadGT3XPlus(filename)
data = res$Raw
data$DT = paste(data$Date, data$Time)
data$DT = ymd_hms(data$DT)
df = as.data.frame(data)
fst_file = tempfile(fileext = ".fst")
fst::write_fst(df, fst_file)
fst_df = fst::fst(fst_file)
class(fst_df)
is.data.frame(fst_df)
sub_df = fst_df[ fst_df$DT >= ymd_hms("2012-06-27 11:00:00") &
fst_df$DT <= ymd_hms("2012-06-27 12:00:00"), ]
is.data.frame(sub_df)
class(fst_dt)
fst_dt
?fst::fst
?fst::read_fst()
library(ActivityIndex)
library(fst)
library(lubridate)
library(data.table)
filename = system.file("extdata","sample_GT3X+.csv.gz",
package="ActivityIndex")
res = ActivityIndex::ReadGT3XPlus(filename)
data = res$Raw
data$DT = paste(data$Date, data$Time)
data$DT = ymd_hms(data$DT)
?setkey()
head(data)
library(ActivityIndex)
library(fst)
library(lubridate)
library(data.table)
filename = system.file("extdata","sample_GT3X+.csv.gz",
package = "ActivityIndex")
res = ActivityIndex::ReadGT3XPlus(filename)
data = res$Raw
data$DT = paste(data$Date, data$Time)
data$DT = ymd_hms(data$DT)
setkey(data, DT)
head(data)
df = as.data.frame(data)
fst_file = tempfile(fileext = ".fst")
fst::write_fst(df, fst_file)
fst_df = fst::fst(fst_file)
class(fst_df)
is.data.frame(fst_df)
sub_df = fst_df[ fst_df$DT >= ymd_hms("2012-06-27 11:00:00") &
fst_df$DT <= ymd_hms("2012-06-27 12:00:00"), ]
is.data.frame(sub_df)
dt_fst_file = tempfile(fileext = ".fst")
fst::write_fst(data, dt_fst_file)
fst_dt = fst::fst(dt_fst_file)
class(fst_dt)
fst_dt
dt = read_fst(dt_fst_file, as.data.table = TRUE)
head(dt)
key(dt)
key(fst_dt)
?fst
#######################
# Write out fst files
#######################
fst_file = tempfile(fileext = ".fst")
library(ActivityIndex)
library(fst)
library(lubridate)
library(data.table)
filename = system.file("extdata","sample_GT3X+.csv.gz",
package = "ActivityIndex")
res = ActivityIndex::ReadGT3XPlus(filename)
data = res$Raw
data$DT = paste(data$Date, data$Time)
data$DT = ymd_hms(data$DT)
setkey(data, DT)
object.size(data)
df = as.data.frame(data)
object.size(df)
object.size(df, units = "Mb")
format(object.size(df), units = "Mb")
format(object.size(data), units = "Mb")
library(ActivityIndex)
library(fst)
library(lubridate)
library(data.table)
filename = system.file("extdata","sample_GT3X+.csv.gz",
package = "ActivityIndex")
res = ActivityIndex::ReadGT3XPlus(filename)
data = res$Raw
data$DT = paste(data$Date, data$Time)
data$DT = ymd_hms(data$DT)
setkey(data, DT)
format(object.size(data), units = "Mb")
df = as.data.frame(data)
format(object.size(df), units = "Mb")
#######################
# Write out fst files
#######################
fst_file = tempfile(fileext = ".fst")
fst::write_fst(df, fst_file)
fst_df = fst::fst(fst_file)
class(fst_df)
format(object.size(fst_df), units = "Mb")
library(ActivityIndex)
library(fst)
library(lubridate)
library(data.table)
filename = system.file("extdata","sample_GT3X+.csv.gz",
package = "ActivityIndex")
res = ActivityIndex::ReadGT3XPlus(filename)
data = res$Raw
data$DT = paste(data$Date, data$Time)
data$DT = ymd_hms(data$DT)
setkey(data, DT)
format(object.size(data), units = "Mb")
df = as.data.frame(data)
format(object.size(df), units = "Mb")
#######################
# Write out fst files
#######################
fst_file = tempfile(fileext = ".fst")
fst::write_fst(df, fst_file)
fst_df = fst::fst(fst_file)
class(fst_df)
format(object.size(fst_df), units = "Mb")
is.data.frame(fst_df)
object.size(fst_df)
sub_df = fst_df[ fst_df$DT >= ymd_hms("2012-06-27 11:00:00") &
fst_df$DT <= ymd_hms("2012-06-27 12:00:00"), ]
is.data.frame(sub_df)
format(object.size(sub_df), units = "Mb")
# use data.table
dt_fst_file = tempfile(fileext = ".fst")
fst::write_fst(data, dt_fst_file)
fst_dt = fst::fst(dt_fst_file)
class(fst_dt)
fst_dt
format(object.size(fst_dt), units = "Mb")
# key is preserved
dt = read_fst(dt_fst_file, as.data.table = TRUE)
key(dt)
format(object.size(dt), units = "Mb")
